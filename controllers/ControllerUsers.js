const UserModel = require("./../Schema/SchemaUsers");
const AnnonceModel = require("./../Schema/SchemaAnnonces");
const sendEmail = require("./../middlewares/nodemailer");
const postuler = require("./../middlewares/postuler");
const crypto = require("crypto");
exports.loginView = async (req, res) => {
  res.render("login");
};
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "Email et mot de passe requis" });
    }

    const user = await UserModel.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res.status(401).json({ message: "Mot de passe incorrect" });
    }
    req.session.user = {
      id: user._id,
      prenom: user.prenom,
      nom: user.nom,
    };
    // console.log("Session:", req.session.user);
    res.redirect(`/home`);
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};
exports.registerView = async (req, res) => {
  res.render("signup");
};
exports.register = async (req, res) => {
  const filePath = req.file.path;
  req.body.cv = filePath.replaceAll("\\", "/").split("/").splice(1).join("/");

  try {
    const newUser = new UserModel(req.body);
    const Usersaved = await newUser.save();
    res.status(200).redirect("login");
  } catch (error) {
    res.status(500).send("server error:" + error.message);
  }
};
exports.profileUser = async (req, res) => {
  try {
    const userId = req.params.id;

    if (!userId) {
      return res.status(401).send("Utilisateur non authentifi√©");
    }
    const user = await UserModel.findById(userId);
    if (!user) {
      return res.status(404).send("Utilisateur non trouv√©");
    }

    res.status(200).render("profileuser", { user });
  } catch (error) {
    res.status(500).send("Erreur serveur : " + error.message);
  }
};
exports.profileEditView = async (req, res) => {
  const userId = req.params.id;
  try {
    const user = await UserModel.findById(userId);
    if (!user) {
      return res.status(404).send("Utilisateur non trouv√©");
    } else {
      const userCV = user.cv;
      console.log("userCV", userCV);
      const userCVPath = userCV.split("/").splice(1).join("/");
      console.log("userCVPath", userCVPath);
      res.status(200).render("editprofile", { user });
    }
  } catch (error) {
    res.status(500).send("Erreur serveur : " + error.message);
  }
};
exports.profile = async (req, res) => {
  if (req.file) {
    const filePath = req.file.path;
    req.body.cv = filePath.replaceAll("\\", "/").split("/").splice(1).join("/");
  }
  const userId = req.session.user.id;
  try {
    const updatedUser = await UserModel.findByIdAndUpdate(userId, req.body, {
      new: true,
      runValidators: true,
    });

    // Apr√®s la mise √† jour r√©ussie, rediriger l'utilisateur
    return res.status(200).redirect("/logout"); // Utilisation du `return` pour stopper l'ex√©cution ici
  } catch (error) {
    console.error("Server Error:", error);

    // V√©rifie si les en-t√™tes n'ont pas d√©j√† √©t√© envoy√©s
    if (!res.headersSent) {
      return res
        .status(500)
        .send("Une erreur est survenue sur le serveur : " + error.message);
    }
  }
};
exports.forgotPasswordView = async (req, res) => {
  res.render("forgot-password");
};
exports.forgotPassword = async (req, res) => {
  try {
    // console.log("Requ√™te re√ßue :", req.body);
    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ message: "L'e-mail est requis." });
    }
    const user = await UserModel.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // console.log("Utilisateur trouv√© :", user);
    // console.log("Email √† envoyer :", user.email);

    // V√©rification avant d'envoyer l'e-mail
    if (!user.email) {
      console.error("Erreur : l'utilisateur n'a pas d'adresse e-mail !");
      return res
        .status(500)
        .json({ message: "L'utilisateur n'a pas d'adresse e-mail." });
    }

    // G√©n√©ration du token
    const resetToken = crypto.randomBytes(32).toString("hex");
    const hashedToken = crypto
      .createHash("sha256")
      .update(resetToken)
      .digest("hex");

    user.resetPasswordToken = hashedToken;
    user.resetPasswordExpires = Date.now() + 3600000; // 1 heure d'expiration
    await user.save();

    console.log("Token brut envoy√© par email :", resetToken);
    console.log("Token hach√© stock√© en base :", hashedToken);

    // URL de r√©initialisation
    const resetURL = `http://localhost:3005/reset-password/${resetToken}/?expires=${user.resetPasswordExpires}`;
    try {
      await sendEmail({
        to: user.email,
        subject: "R√©initialisation du mot de passe",
        text: `Cliquez ici pour r√©initialiser votre mot de passe : ${resetURL}`,
        html: `<a href="${resetURL}">Cliquez ici pour r√©initialiser votre mot de passe</a>`,
      });

      res.status(200).json({ message: "E-mail de r√©initialisation envoy√©." });
    } catch (error) {
      console.error("Erreur lors de l'envoi de l'e-mail :", error.message);
      return res
        .status(500)
        .json({ message: "Erreur lors de l'envoi de l'e-mail." });
    }
  } catch (error) {
    console.error("Erreur interne :", error.message);
    res.status(500).json({ message: "Erreur serveur interne." });
  }
};
exports.resetPasswordView = async (req, res) => {
  try {
    // console.log("Requ√™te re√ßue :", req.params);
    const expires = req.query.expires;
    const token = req.params.token;
    // console.log("Token re√ßu en param√®tre :", { token, expires });
    res.render("reset-password", { token, expires }); // V√©rifie que le fichier 'reset-password.ejs' existe
  } catch (error) {
    console.error("Erreur lors de l'affichage de la page :", error.message);
    res.status(500).json({ message: "Erreur serveur" });
  }
};
exports.resetPassword = async (req, res) => {
  try {
    const { token } = req.params;
    const { password } = req.body;
    const { expires } = req.query;

    if (!password) {
      return res.status(400).json({ message: "Le mot de passe est requis." });
    }

    console.log("Token re√ßu en param√®tre :", token);
    const hashedToken = crypto.createHash("sha256").update(token).digest("hex");
    console.log("Token hach√© pour la recherche :", hashedToken);

    const user = await UserModel.findOne({
      resetPasswordToken: hashedToken,
    });
    console.log("Utilisateur trouv√© :", user);
    if (!user || user.resetPasswordExpires !== expires) {
      return res.status(400).json({ message: "Token invalide ou expir√©" });
    }

    // Mise √† jour du mot de passe et suppression du token
    user.password = password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    await user.save();

    res.status(200).json({ message: "Mot de passe r√©initialis√© avec succ√®s" });
  } catch (error) {
    console.error("Erreur lors de la r√©initialisation :", error.message);
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};
// exports.postuler = async (req, res) => {
//   try {
//     const annonceId = req.params.id;
//     const userId = req.session.user.id;

//     const user = await UserModel.findById(userId);
//     if (!user) {
//       return res.status(404).send("Utilisateur non trouv√©");
//     }
//     const annonce = await AnnonceModel.findById(annonceId);
//     if (!annonce) {
//       return res.status(404).send("Annonce non trouv√©e");
//     }
//     // console.log("Annonce avant postulation :", annonce);
//     // console.log("Utilisateur avant postulation :", user);
//     const sent = await postuler({
//       to: annonce.entreprise.email,
//       subject: "Proposition de candidature pour un poste de pr√©pos√©",
//       text: `Bonjour Madame/Monsieur,

// Nous avons actuellement un candidat correspondant √† votre annonce sur la plateforme Stage Express pour un poste de pr√©pos√©.

// Notre candidat, ${user.prenom} ${user.nom}, est tr√®s int√©ress√© par l'opportunit√© que vous proposez. Nous vous prions de bien vouloir consulter son CV et de le contacter directement pour un entretien.

// Vous pouvez le joindre :
// üìß Par email : ${user.email}
// üìû Par t√©l√©phone : ${user.telephone}

// Nous restons √† votre disposition pour toute information compl√©mentaire. Vous trouverez en pi√®ce jointe son CV ainsi que sa lettre de motivation.

// üìé Lien du CV et de la lettre de motivation : Acc√©der au document

// Seriez-vous disponible pour √©changer davantage et, si possible, organiser une rencontre ou un entretien ?

// Dans l‚Äôattente de votre retour, je vous remercie pour votre attention et reste √† votre disposition.

// Cordialement,
// ${user.prenom} ${user.nom}
// üìû ${user.telephone}
// üìß ${user.email}
// `,
//       html: `<p>Bonjour Madame/Monsieur,</p>


// .`,
//       html: `<p>Vous avez postul√© √† l'annonce ${annonce.titre}. Vous serez contact√© si votre candidature est retenue.</p>`,
//     });
//     console.log("Email envoy√© :", sent);
//     res.status(200).redirect("/home");
//   } catch (error) {
//     res.status(500).send("Erreur serveur : " + error.message);
//   }
// };
exports.postuler = async (req, res) => {
  try {
    const annonceId = req.params.id;
    const userId = req.session.user.id;

    const user = await UserModel.findById(userId);
    if (!user) {
      return res.status(404).send("Utilisateur non trouv√©");
    }

    const annonce = await AnnonceModel.findById(annonceId);
    if (!annonce) {
      return res.status(404).send("Annonce non trouv√©e");
    }

    const cvUrl = `http://localhost:3005/${user.cv}`; // Assurez-vous que l'URL est correcte

    const sent = await postuler({
      to: annonce.entreprise.email,
      subject: "Proposition de candidature pour un poste de pr√©pos√©",
      text: `Bonjour Madame/Monsieur,

Nous avons actuellement un candidat correspondant √† votre annonce sur la plateforme Stage Express pour un poste de pr√©pos√©.

Notre candidat, ${user.prenom} ${user.nom}, est tr√®s int√©ress√© par l'opportunit√© que vous proposez. Nous vous prions de bien vouloir consulter son CV et de le contacter directement pour un entretien.

Vous pouvez le joindre :
üìß Par email : ${user.email}
üìû Par t√©l√©phone : ${user.telephone}

Nous restons √† votre disposition pour toute information compl√©mentaire. Vous trouverez en pi√®ce jointe son CV ainsi que sa lettre de motivation.

üìé Lien du CV et de la lettre de motivation : ${cvUrl}

Seriez-vous disponible pour √©changer davantage et, si possible, organiser une rencontre ou un entretien ?

Dans l‚Äôattente de votre retour, je vous remercie pour votre attention et reste √† votre disposition.

Cordialement,
${user.prenom} ${user.nom}
üìû ${user.telephone}
üìß ${user.email}
`,

      html: `<p>Bonjour Madame/Monsieur,</p>
            <p>Nous avons actuellement un candidat correspondant √† votre annonce sur la plateforme <strong>Stage Express</strong> pour un poste de <strong>pr√©pos√©</strong>.</p>
            <p><strong>Notre candidat :</strong> ${user.prenom} ${user.nom}</p>
            <p>Il est tr√®s int√©ress√© par cette opportunit√© et souhaiterait vous rencontrer.</p>
            <p>Vous pouvez le contacter directement :</p>
            <ul>
                <li><strong>Email :</strong> <a href="mailto:${user.email}">${user.email}</a></li>
                <li><strong>T√©l√©phone :</strong> ${user.telephone}</li>
            </ul>
            <p>Vous trouverez en pi√®ce jointe son CV ainsi que sa lettre de motivation.</p>
            <p>üìé <a href="${cvUrl}">Acc√©der au CV et √† la lettre de motivation</a></p>
            <p>Seriez-vous disponible pour √©changer davantage et, si possible, organiser une rencontre ou un entretien ?</p>
            <p>Dans l‚Äôattente de votre retour, je vous remercie pour votre attention et reste √† votre disposition.</p>
            <p>Cordialement,<br>
            ${user.prenom} ${user.nom}<br>
            üìû ${user.telephone}<br>
            üìß <a href="mailto:${user.email}">${user.email}</a></p>`
    });

    console.log("Email envoy√© :", sent);
    res.status(200).redirect("/home");
  } catch (error) {
    console.error("Erreur lors de l'envoi de l'email :", error);
    res.status(500).send("Erreur serveur : " + error.message);
  }
};
